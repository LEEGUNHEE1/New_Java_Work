-Dfile.encoding=MS949

//Class
//이름: 첫글자 영문자 대문자
//여러개 단어로 클래스이름을 만들때는 카멜 표기법 사용
//예:CustomInfoNote
//접근지정자: public,private,protected

//메서드
//명령어
//기본 메인 메소드
//JDK의 JVM이 자동으로 호출
//메소드의 이름은 반드시 소문자 영문자로 시작
//뒷부분은 카멜 표기법 사용
//예:customInfoNote

//변수
//메소드 이름 정의를 따름
//자료형 변수;
//예:customInfoNote
//int: 8개 자료형중 하나(정수만)
//10,-10,0(약 플마 21억)
//int num1;
//int num2;
//int num1 = 10; 변수 선언과 동시에 초기화

//System.in : 키보드로 1byte를 입력 받음
//InputStreamReader : System.in으로 입력받은 1byte를 문자(String)로 형변환 시킴
//BufferedReader : 입력받은 데이터 처리속도를 빠르게 저장함

//삼항 연산자
// 조건문 ? true 값 : false 값;

/*
 && : AND (조건식 두개 모두 T 면 T)
 T && T : T
 T && F : F
 F && T : F
 F && F : F
  
 || : OR (조건식 둘 중 하나가 T 면 T)
 T || T : T
 T || F : T
 F || T : T
 F || F : F
 */
 
 //제어문 종류
//조건문 : if, if ~ else, elseif
//반복문 : for, while, do~while
//switch 

/*
//(조건식){true일때 작업}
if (num%2 == 0) {
	str = "짝수";
} 
if (num%2 != 0) {
	str = "홀수";
}*/

//Scanner
//단락문자의 패턴을 사용해 분류하는 작업
//기본 패턴은 공백

//반복문
//for, while, do~while

//시작값
//while(최대값){증가값; 작업}

//시작값
//do{증가값; 작업}while(최대값);

// static
// 객체가 100개 생성되도 메모리 공간은 1개만 사용

public static int a = 10; // Class 변수
// 클래스변수 또는 클래스 메소드는 로딩되는 순간 메모리 할당이 이뤄지고
// 클래스의 [클래스이름.객체]로 접근 가능
// 즉 new를 통해 메모리 할당을 받지 않아도 사용가능

public int b = 20;// Instance 변수
// 인스턴스 변수 또는 인스턴스 메소드는 new를 통해 객체를 생성하고
// 객체를 통해서만 접근이 가능하다
// 인스턴스 변수는 같은 클래스의 메소드에서는 바로 접근 가능하지만
// 클래스 메소드에서는 접근 불가

//메소드 오버로딩(중복정의)
//하나의 클래스 안에서 메소드 이름 통일
//매개변수의 갯수가 다르거나 자료형이 다르면 다른 메소드로 인식

//생성자
//메모리 할당을 받을때 사용
//변수 초기화 목적으로 사용
//생성자는 Class이름과 동일
//리턴값이 없기때문에 property(반환값)이 없다
//중복 정의(overload) 가능
//생성자 안에서 다른 생성자 호출 가능
//단, 제일 선두에서 한번만 호출 가능

// 초기화 블럭, 객체가 생성되 메모리에 할당 됫을때 딱 한번 무조건 실행

//static 블럭, 객체 생성 안해도 실행시 자동으로 메모리에 할당 무조건 한번 실행

//상수 : 프로그램 실행될때 반드시 초기화 해야되고 끝날때까지 변수값 변경 불가

//Call By Value
//stack 영역의 데이터가 heap 영역으로 넘어감
	
//Call By Reference
//heap 영역의 데이터는 stack 영역으로 넘어가지 못하고 주소를 넘겨줌

//상속(부모가 자식한테 주는것)
//1.부모꺼는 자식꺼다
//2.private로 선언한 것은 상속 불가
//3.protected로 선언한 것은 상속 가능
//4.자식꺼는 자식꺼
//5.부모와 자식이 같은 객체를 가지고 있으면 내꺼를 사용한다

// 메소드 오버라이드
// 상속관계에서 하는일이 비슷한 메소드의 이름을 통일 시키는 작업
@Override //annotation
	
//String : 자료형이 아닌 클래스
//저장할 데이터의 양은 커서 Heap영역에 저장하고 사용빈도가 높아 자료형처럼 사용함
//String은 불변의 법칙을 가진다
//문자열비교는 ==가 아니라 equals로 비교해야함
	
//String에 도움을 주는 클래스
//StringBuffer
//StringBuilder	
	
//Wrapper 클래스
//자료형
//boolean,byte,char,short,int,long,float,double

//레퍼런스 데이터형
//Boolean,Byte,Chartacter,Short,Long,Float,Double,Integer

//자료형(stack) -> 레퍼런스(heap) : Auto-Boxing 
//레퍼런스(heap) -> 자료형(stack) : Auto-UnBoxing	
	
/*
 * int a = 10;
 * double b;
 * 
 * b = a;  암시적형변환 (O)
 * b = (double)a; 명시적형변환 (O)
 * 
 * a = b; (X)
 * a = (int)b; (O)
 * 
 * --------------------------------
 * 부모(b) - 자식(a)
 * 
 * 부모 = 자식; upcast (O)  
 * 부모 = (부모)자식; upcast (O)  
 * 
 * 자식 = 부모; downcast (X) 
 * 자식 = (자식)부모; downcast (O)
 */	
	
//upcast
//메소드는 형변환(upcast)해도 자기꺼만 씀
//메소드는 힙 영역이 아니라 메소드 영역에 있어서 접근 불가
((Test)ob).write();	
	
((Test)ob).b); //20 변수는 형변환(upcast)하면 부모꺼 사용 가능	

//Singleton
//객체를 계속 생성하는게 아니라 하나의 객체만 생성해서 사용하는 방법

//final
//변수에 사용하면 단 한번만 초기화 가능
//메소드에 사용하면 Override 불가능
//클래스에 사용하면 상속 불가능

//추상클래스
//메모리 낭비없이 클래스 미리 설계
//메소드를 재정의 해서 사용
//추상 메소드 1개가 반드시 있어야함
//일반 메소드도 가능

//Interface
//추상클래스의 일종으로 선언만 있고 정의가 없다
//final변수만 선언 가능
//변수는 무조건 public, static, final 보유, 생략되있음
//메소드는 public, abstract 보유,생략 , 일반메소드 불가
//interface를 구현하기위해서는 implements사용
//하나 이상의 인터페이스를 구현한 클래스는 모든 메소드를 오버라이드해야함
//인터페이스가 인터페이스를 상속 받을수 있고 이때는 extends 사용
//클래스랑은 다르게 다중 구현 가능

//내부클래스
//클래스 안에 클래스 생성 가능
//메소드 안에 클래스 생성 가능
//외부 클래스 객체가 생성 되어야 내부 클래스 객체도 생성 가능
//외부 클래스 객체가 생성됫다고해서 내부 클래스 객체가 생성된건 아님

//Collection Framework
//List(I) - ArrayList(C),Vector(C)
//Map(I) - HashMap(C),HashTable(C),TreeMap(C)
//객체 생성때 제너릭 안주면 요소들이 들어갈때 자동으로 오브젝트 타입으로 업캐스팅됨

//toString
//오브젝트 메소드 toString을 오버라이딩한다음 프린트할때 메소드 이름을 호출안하고 
//클래스 이름만 호출해도 toString이 자동 호출됨

//Map<key,value> 인터페이스
//HashTable : Vector와 동일
//HashMap : ArrayList와 동일
//TreeMap : 자동 정렬되서나옴
//key는 중복값 가질수 없다(Set 타입)
//key가 중복되면 수정됨, 기존 데이터 삭제 
//Map은 iterator가 없다,Set꺼 가져다 씀


스레드(Thread)

  - 스레드 => 프로세스 내부에서 실행되는 명령 모임

  - 단일스레드 : main 메소드만을 이용하여 프로그램을 작성

    => main 메소드가 종료되면 프로그램도 종료된다.

    => 명령이 하나의 흐름으로만 구성 : 동시에 명령을 실행할 수 없다.

  - 다중스레드 : main 메소드뿐만 아니라 다른 메소드에서도 동시에 명령이 실행

    => 실시간으로 데이타를 보여주는 프로그램을 만들때 사용

    => 게임, 채팅, 주식프로그램 등

    => 모든 스레드가 종료되어야지만 프로그램도 종료된다.

  - 다중스레드 프로그램 작성 방법

   1. java.lang 패키지의 Thread 클래스를 사용하는 방법

      1) Thread 클래스를 상속 받는 자식클래스를 작성한다.

      2) Thread 클래스에 선언된 run() 메소드를 오버라이딩 한다.

         => main() 메소드와 동시에 실행될 수 있는 명령을 작성 

         => main 스레드와 별개로 실행되는 스레드를 작성
    
      3) 자식클래스를 이용하여 객체를 생성한다. => 스레드 생성

      4) 객체를 이용하여 start()메소드를 호출한다. => run() 메소드가 호출되면서 스레드가 실행

      ※ run()메소드로 호출하면 일반 메소드 호출과 동일하다.     

   2. java.lang 패키지의 Runnable 인터페이스를 사용하는 방법   

      => java에서는 다중상속을 지원하지 않으므로 Thread 클래스를 상속받지 못하는 경우가 있다.
         이럴 경우에는 Runnable 인터페이스를 상속 받아 사용한다.

      1) Runnable 인터페이스를 상속 받는 자식클래스를 작성한다.

      2) Runnable 인터페이스에 선언된 run() 메소드를 오버라이딩 한다.

      3) 자식클래스를 이용하여 객체를 생성한다. 

      4) 자식클래스로 만든 객체를 활용하여 Thread 객체를 생성한다. => Thread 생성

      5) Thread 객체를 이용하여 start()메소드를 호출한다.

  - Thread 실행 우선순서 지정

    => Thread객체.setPriority(int newPRIORITY)메소드를 이용

  - Thread 제어

    => start() 메소드 : Thread 실행

    => stop() 메소드 : Thread 중지

    => destroy() 메소드 : Thread 소멸 

    => sleep() 메소드 : 1/1000초 단위로 실행속도를 조절할 수 있다.

    => suspend() 메소드 : 스레드을 일시 정지 - wait() 메소드

    => resume() 메소드 : suspend() 메소드로 중지된 스레드를 다시 실행한다. - notify() 메소드 


● 스레드 동기화

  - 다중스레드 프로그램의 문제점

    => 스레드는 독립적으로 명령을 실행하는데 이 때 각각의 스레드가 동시에 공유된 데이타에 접근할 
       경우 데이타 처리에 오작동이 발생할 수 있다.

  - 동기화 => 스레드가 공유된 데이타를 처리할 경우 먼접 접근한 스레드가 다른 스레드의 접근을
              차단하기 위해 Lock를 걸어주는 기능

  - 동기화 방법

    1) 공유된 데이타를 처리하는 메소드를 동기화 시키는 방법

       형식) synchronized 반환형 메소드명(매개변수,...)
             {
                  공유데이타를 처리하는 명령;
             }

    2) 공유된 데이타를 처리하는 메소드를 호출하는 영역을 동기화 시키는 방법

       형식) synchronized(객체명)   => 공유된 데이타를 포함하고 있는 객체 
             {
                   객체명.메소드명(값,..);//공유된 데이타를 처리하는 메소드
             }
//스레드는 런 안에 반드시 인터벌을 줘야하고 인터벌은 try문안에 넣야함

//데몬스레드
//다른스레드에 도움을 주는 스레드로 메인스레드가 종료가 되면 프로세스가 종료된다


//Stream
//데이터 입출력시 모든 데이터를 형태와 상관없이 단방향으로 데이터를 전송하는 객체

//File
//파일및 폴더를 관리하는 클래스
//파일의 정보를 제공해주지만 만들거나 수정은 못한다
//폴더는 만듬

//객체의 직렬화
//메모리에 생성된 클래스 객체의 멤버변수의 현재상태를 그대로 보존해 파일에 저장하거나 네트워크를 통해
//전달 할수 있게 하는 기능
//바이트 단위로만 데이터를 전송
//장점은 객체 자체의 내용을 입출력형식에 구애받지 않고 객체를 파일에 저장해 영속성 제공
//Serializable 이라는 인터페이스로 구현
//단 이 인터페이스는 메소드가 없음
//ObjectOutputStream 메모리의 데이터를 저장할수있게 해줌

//DatagramSocket: UDP로 데이터그램 패킷을 전송하거나 수신
//DatagramPacket: UDP를 이용해 전송될수있는 데이터
//MulticastSocket:다수의 클라이언트에 데이터그램 전송
//그룹범위 : Dclass(224.0.0.0~239.255.255.255)

//Document Object Model : DOM(XML , HTML)
//DOM Document 객체를 생성하기 위해 팩토리를 생성


	